def print_array(int s[], int begin, int end)
{
    int i;
    for (i = begin; i < end; i = i + 1)
    {
        print s[i];
    }
}

def reverse(int s[], int begin, int end)
{
    int size;
    size = end - begin;

    int i;
    for (i = 0; i < size/2; i = i + 1)
    {
        int temp;
        temp = s[begin + i];
        s[begin + i] = s[end - 1 - i];
        s[end - 1 - i] = temp;
    }
}

def rotate(int s[], int begin, int end, int k)
{
    reverse(s, begin, end - k);
    reverse(s, end - k, end);
    reverse(s, begin, end);
}

def stable_partition(int s[], int begin, int end, int pivot)
{
    int size;
    size = end - begin;

    if (size < 2)
    {
        if (s[begin] < pivot)
            return begin + 1;
        else
            return begin;
    }

    int midpoint;
    midpoint = begin + size/2;

    int left_partition_point;
    left_partition_point = stable_partition(s, begin, midpoint, pivot);
    int right_partition_point;
    right_partition_point = stable_partition(s, midpoint, end, pivot);

    rotate(s,
           left_partition_point,
           right_partition_point,
           right_partition_point - midpoint);

    int partition_point;
    partition_point = left_partition_point + (right_partition_point - midpoint);
    return partition_point;
}

def stable_quicksort(int s[], int begin, int end)
{
    int size;
    size = end - begin;

    if (size < 2)
    {
        return;
    }

    int pivot;
    pivot = s[begin];
    int partition_point;
    partition_point = stable_partition(s, begin, end, pivot);

    stable_quicksort(s, begin, partition_point);
    stable_quicksort(s, partition_point + 1, end);
}

def main()
{
    int s[20];
    s = new int[20];
    s[0] = 18;
    s[1] = 0;
    s[2] = 2;
    s[3] = 3;
    s[4] = 4;
    s[5] = 16;
    s[6] = 7;
    s[7] = 9;
    s[8] = 5;
    s[9] = 15;
    s[10] = 12;
    s[11] = 8;
    s[12] = 10;
    s[13] = 13;
    s[14] = 19;
    s[15] = 17;
    s[16] = 1;
    s[17] = 11;
    s[18] = 6;
    s[19] = 14;

    print "before:\n";
    print_array(s, 0, 20);

    stable_quicksort(s, 0, 20);

    print "after:\n";
    print_array(s, 0, 20);
}
